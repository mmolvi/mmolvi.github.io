(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{202:function(e,s,a){e.exports=a.p+"assets/img/enable-request.2797f139.png"},222:function(e,s,a){"use strict";a.r(s);var t=a(0),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"enable-request"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enable-request"}},[e._v("#")]),e._v(" Enable Request")]),e._v(" "),t("p",[e._v("When Enzyme extension is accessed by DApp due to security reasons user must go through Enable request allowing DApps access to Blockchain and related accounts")]),e._v(" "),t("h2",{attrs:{id:"javascript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[e._v("#")]),e._v(" Javascript")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { web3Enable } from '@polkadot/extension-dapp';\n\n// returns an array of all the injected sources\n// (this needs to be called first, before other requests)\n// It will open the extension for authorization\nconst allInjected = await web3Enable('my cool dapp');\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("img",{attrs:{src:a(202),width:"300"}}),e._v(" "),t("p",[e._v("You can allow or reject to authorized dApp. Once you allow you can call following web3Accounts() to get all the accounts.")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { web3Accounts } from '@polkadot/extension-dapp';\n\n// returns an array of { address, meta: { name, source } }\n// meta.name contains the alias of this account\n// meta.source contains the name of the extension that provides this account\nconst allAccounts = await web3Accounts();\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);